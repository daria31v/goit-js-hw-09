{"mappings":"gfAQA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAvCQQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGxB,SAAwBC,GACtBA,EAAIC,iBACJ,IAAgCC,EAAAF,EAAIG,OAAOC,SAAnCC,EAAwBH,EAAxBG,KAAMC,EAAkBJ,EAAlBb,MAAOkB,EAAWL,EAAXK,OACfC,EAAMR,EAAIG,OAAOM,iBAEnBC,EAAaC,OAAOL,EAAMM,OAE9BJ,EAAIK,UAAW,EAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAOK,MAAOE,GAAK,EACtC3B,EAAc2B,EAAGJ,GACdK,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE9D+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAAgC,OAAOI,QAAQ,sBAAqCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE9DqB,GAAcC,OAAON,EAAKO,OAG5BhB,YAAW,WACTY,EAAIK,UAAW,C,GACdH,E","sources":["src/js/03-promises.js"],"sourcesContent":["// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, \n// крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. \n// Під час кожного виклику передай їй номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), \n// введену користувачем, і крок(step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. \n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. \n\nimport { Notify } from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nformEl.addEventListener('submit', onSubmitFormEl);\n\n// function\nfunction onSubmitFormEl(evt) {\n  evt.preventDefault();\n  const { step, delay, amount } = evt.target.elements;\n  const btn = evt.target.lastElementChild;\n  \n  let totalDelay = Number(delay.value);\n\n  btn.disabled = true;\n\n  for (let i = 1; i <= amount.value; i += 1) {\n    createPromise(i, totalDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    totalDelay += Number(step.value);\n  }\n   // add disable\n  setTimeout(() => {\n    btn.disabled = false;\n  }, totalDelay);\n}\n\n// promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n});\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","target","elements","step","delay1","amount","btn","lastElementChild","totalDelay","Number","value","disabled","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.c666fafe.js.map"}